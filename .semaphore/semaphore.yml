version: v1.0
name: CI
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu2004
    # Use the latest stable version of Semaphore 2.0 YML syntax:
    version: v1.0

    # Name your pipeline. In case you connect multiple pipelines with promotions,
    # the name will help you differentiate between, for example, a CI build phase
    # and delivery phases.
    name: Semaphore Python / Django Example Pipeline

    # An agent defines the environment in which your code runs.
    # It is a combination of one of available machine types and operating
    # system images.
    # See https://docs.semaphoreci.com/article/20-machine-types
    # and https://docs.semaphoreci.com/article/32-ubuntu-1804-image
    agent:
      machine:
        type: e1-standard-2
        os_image: ubuntu2004

    global_job_config:
      prologue:
        commands:
          - sem-version python 3.8

    # Blocks are the heart of a pipeline and are executed sequentially.
    # Each block has a task that defines one or more jobs. Jobs define the
    # commands to execute.
    # See https://docs.semaphoreci.com/article/62-concepts
    blocks:
      - name: "Install Dependencies"
        task:
          # This block installs all the python dependencies,
          # as well as all the required Linux packages.
          # The prologue section is always executed before each job on
          # the block.
          # See https://docs.semaphoreci.com/article/50-pipeline-yaml#prologue
          prologue:
            commands:
              # Set the python version.
              # See https://docs.semaphoreci.com/article/132-sem-service-managing-databases-and-services-on-linux
              # Install Linux dependencies.
              - sudo apt-get update && sudo apt-get install -y build-essential libpq-dev
          jobs:
            - name: pip
              commands:
                # Get the latest version of our source code from GitHub:
                # See https://docs.semaphoreci.com/article/54-toolbox-reference#checkout
                - checkout
                # Restore dependencies from cache. This command will not fail in
                # case of a cache miss. In case of a cache hit, pip can use it
                # to speed up the installation.
                # For more info on caching, see https://docs.semaphoreci.com/article/149-caching
                - cache restore
                # Install python dependencies.
                - curl -LsSf https://astral.sh/uv/install.sh | sh
                # If not found in the cache, pip will download them.
                - uv sync --all-groups --cache-dir .pip_cache
                # Persist downloaded packages for future jobs.
                - cache store

      - name: "Run Code Analysis"
        task:
          # This block executes code analysis tests with pylint.
          prologue:
            commands:
              - checkout
              # At this point, the cache contains the downloaded packages ...
              - cache restore
              # ... so pip does the installation much faster.
              - uv sync --cache-dir .pip_cache
          jobs:
            - name: Pylint
              commands:
                # list out files that are in directory and working tree
                # grep -v will exclude the files being considered for pylint
                # grep -E will matches files having .py extension
                # This command will help to pass required python files to pylint along with pylint_djanog plugin
                # Pylint with -E option will display only if there is any error
                - git ls-files | grep -v 'migrations' | grep -v 'settings.py' | grep -v 'manage.py' | grep -E '.py$' |
                  xargs pylint -E --load-plugins=pylint_django

      - name: "Run Unit Tests"
        task:
          # This block runs the unit tests.
          # Since the test require a database, we start the database here.
          # Django automatically creates a test database schema.
          prologue:
            commands:
              # Start a MySQL database. On Semaphore, databases run in the same
              # environment as your code.
              # See https://docs.semaphoreci.com/article/32-ubuntu-1804-image#databases-and-services
              # Also https://docs.semaphoreci.com/article/54-toolbox-reference#sem-service
              - sem-service start mysql
              - checkout
              - cache restore
              - uv sync --all-groups --cache-dir .pip_cache
          # Two parallel test jobs are executed.
          jobs:
            - name: Model Test
              commands:
                # Test the application's database models.
                - python manage.py test
