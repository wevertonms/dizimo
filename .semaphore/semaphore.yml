# Use the latest stable version of Semaphore 2.0 YML syntax:
version: v1.0

# Name your pipeline. In case you connect multiple pipelines with promotions,
# the name will help you differentiate between, for example, a CI build phase
# and delivery phases.
name: Semaphore Python / Django Example Pipeline

# An agent defines the environment in which your code runs.
# It is a combination of one of available machine types and operating
# system images.
# See https://docs.semaphoreci.com/article/20-machine-types
# and https://docs.semaphoreci.com/article/32-ubuntu-1804-image
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu2004

# Blocks are the heart of a pipeline and are executed sequentially.
# Each block has a task that defines one or more jobs. Jobs define the
# commands to execute.
# See https://docs.semaphoreci.com/article/62-concepts
blocks:
  - name: "Install Dependencies"
    task:
      # This block installs all the python dependencies,
      # as well as all the required Linux packages.
      # The prologue section is always executed before each job on
      # the block.
      # See https://docs.semaphoreci.com/article/50-pipeline-yaml#prologue
      prologue:
        commands:
          # Set the python version.
          # See https://docs.semaphoreci.com/article/132-sem-service-managing-databases-and-services-on-linux
          # Install Linux dependencies.
          - sudo apt-get update && sudo apt-get install -y build-essential libpq-dev
      jobs:
        - name: Setup Environment and run linter
          commands:
            # Get the latest version of our source code from GitHub:
            # See https://docs.semaphoreci.com/article/54-toolbox-reference#checkout
            - checkout
            # Restore dependencies from cache. This command will not fail in
            # case of a cache miss. In case of a cache hit, pip can use it
            # to speed up the installation.
            # For more info on caching, see https://docs.semaphoreci.com/article/149-caching
            - cache restore
            # Install python dependencies.
            - curl -LsSf https://astral.sh/uv/install.sh | sh
            - source $HOME/.local/bin/env
            # If not found in the cache, pip will download them.
            - uv sync --all-groups --cache-dir .pip_cache
            # Persist downloaded packages for future jobs.
            - cache store
            - uv run ruff check .
